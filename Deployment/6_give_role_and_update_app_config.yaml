apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: job-file-modify-role
rules:
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "get"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "update", "patch"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: job-file-modify-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: default
  apiGroup: ""
roleRef:
  kind: Role
  name: job-file-modify-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: update-config
spec:
  ttlSecondsAfterFinished: 3600  # Optional: Retain job for 1 hour after completion
  template:
    spec:
      serviceAccountName: default
      containers:
      - name: update-config
        image: bitnami/kubectl:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          EXTERNAL_IP=$(kubectl get svc nginx-reverse-proxy-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
          echo "Fetched External IP: $EXTERNAL_IP";
          if [ -z "$EXTERNAL_IP" ]; then
            echo "External IP not found";
            exit 1;
          fi;
          POD_NAME=$(kubectl get pods -l app=app -o jsonpath='{.items[0].metadata.name}');
          echo "Pod Name: $POD_NAME";
          if [ -z "$POD_NAME" ]; then
            echo "Pod not found";
            exit 1;
          fi;
          kubectl exec $POD_NAME -- sh -c "sed -i 's|http://localhost:5050|http://$EXTERNAL_IP/api|' /app/src/config.js";
          kubectl exec $POD_NAME -- cat /app/src/config.js;
      restartPolicy: OnFailure